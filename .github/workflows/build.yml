name: CI/CD Pipeline

on:
  push:
    branches: [ main]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Run cargo test
      run: cargo test --verbose

  publish:
    name: Publish to Crates.io
    needs: test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
    - name: Configure Cargo for publishing
      run: |
        cargo login ${{ secrets.CARGO_TOKEN }}
        
    - name: Publish to Crates.io
      run: cargo publish --verbose
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_TOKEN }}

  build-linux:
    name: Build Linux Release
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-unknown-linux-gnu
        
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-x86_64-unknown-linux-gnu-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Build release binary
      run: cargo build --release --target x86_64-unknown-linux-gnu
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: docker-image-pusher-x86_64-unknown-linux-gnu-ubuntu-latest
        path: target/x86_64-unknown-linux-gnu/release/docker-image-pusher

  build-all:
    name: Build All Platforms
    needs: test
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: docker-image-pusher
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: docker-image-pusher.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: docker-image-pusher
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: docker-image-pusher
            
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
        
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: docker-image-pusher-${{ matrix.target }}-${{ matrix.os }}
        path: target/${{ matrix.target }}/release/${{ matrix.binary_name }}


  release:
    name: Create Release
    needs: build-all
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
      
    - name: Prepare release files
      run: |
        mkdir -p release-files
        cp artifacts/docker-image-pusher-x86_64-unknown-linux-gnu-ubuntu-latest/docker-image-pusher release-files/docker-image-pusher-linux-x64
        cp artifacts/docker-image-pusher-x86_64-pc-windows-msvc-windows-latest/docker-image-pusher.exe release-files/docker-image-pusher-windows-x64.exe
        cp artifacts/docker-image-pusher-x86_64-apple-darwin-macos-latest/docker-image-pusher release-files/docker-image-pusher-macos-x64
        cp artifacts/docker-image-pusher-aarch64-apple-darwin-macos-latest/docker-image-pusher release-files/docker-image-pusher-macos-arm64
        ls -la release-files/
      
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.event_name == 'workflow_dispatch' && format('manual-{0}', github.run_number) || github.ref_name }}
        name: "${{ github.event_name == 'workflow_dispatch' && format('Manual Release #{0}', github.run_number) || format('Docker Image Pusher {0}', github.ref_name) }}"
        files: |
          release-files/docker-image-pusher-linux-x64
          release-files/docker-image-pusher-windows-x64.exe
          release-files/docker-image-pusher-macos-x64
          release-files/docker-image-pusher-macos-arm64
        body: |
          ## Docker Image Pusher Release
          
          This release includes cross-platform binaries for Linux, Windows, and macOS.
          
          ### ðŸš€ Core Features
          - Push Docker image tar packages directly to registries
          - High-performance streaming with priority-based scheduling
          - Large image support (>20GB) with minimal memory usage
          - Enterprise-grade authentication and security
          - Real-time progress tracking with detailed metrics
          - Smart retry mechanisms with exponential backoff
          - Cross-platform compatibility
          
          ### ðŸ“¥ Quick Start
          ```bash
          # Basic usage
          ./docker-image-pusher \
            --repository-url https://registry.example.com/project/app:v1.0 \
            --file /path/to/image.tar \
            --username myuser \
            --password mypassword
          
          # Advanced usage with performance optimization
          ./docker-image-pusher \
            -r https://harbor.company.com/production/app:v2.0 \
            -f large-app.tar \
            -u deployer \
            -p $PASSWORD \
            --max-concurrent 4 \
            --large-layer-threshold 2147483648 \
            --verbose
          ```
          
          ### ðŸ“¦ Download Instructions
          - **Linux x64**: `docker-image-pusher` (x86_64-unknown-linux-gnu)
          - **Windows x64**: `docker-image-pusher.exe` (x86_64-pc-windows-msvc)
          - **macOS Intel**: `docker-image-pusher` (x86_64-apple-darwin)
          - **macOS Apple Silicon**: `docker-image-pusher` (aarch64-apple-darwin)
          
          ### ðŸ“š Documentation
          - [English README](https://github.com/yorelog/docker-image-pusher/blob/main/README.md)
          - [ä¸­æ–‡æ–‡æ¡£](https://github.com/yorelog/docker-image-pusher/blob/main/README_zh.md)
        draft: ${{ github.event_name == 'workflow_dispatch' }}
        prerelease: ${{ github.event_name == 'workflow_dispatch' }}
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
