name: Build and Test

on:
  push:
    branches: [ main,dev]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Run cargo test
      run: cargo test --verbose

  build:
    name: Build Release
    needs: test
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: docker-image-pusher
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: docker-image-pusher.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: docker-image-pusher
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: docker-image-pusher
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            binary_name: docker-image-pusher
            setup_deps: |
              sudo apt-get update
              sudo apt-get install -y musl-tools musl-dev
              sudo ln -s /usr/include/linux /usr/include/x86_64-linux-musl/
              sudo ln -s /usr/include/x86_64-linux-gnu/asm /usr/include/x86_64-linux-musl/
              sudo ln -s /usr/include/asm-generic /usr/include/x86_64-linux-musl/
            env_vars: |
              CC_x86_64_unknown_linux_musl=musl-gcc
              OPENSSL_STATIC=1
              OPENSSL_DIR=/usr/lib/x86_64-linux-gnu

            
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
        
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: docker-image-pusher-${{ matrix.target }}
        path: target/${{ matrix.target }}/release/${{ matrix.binary_name }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
      
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          artifacts/docker-image-pusher-x86_64-unknown-linux-gnu/docker-image-pusher
          artifacts/docker-image-pusher-x86_64-pc-windows-msvc/docker-image-pusher.exe
          artifacts/docker-image-pusher-x86_64-apple-darwin/docker-image-pusher
          artifacts/docker-image-pusher-aarch64-apple-darwin/docker-image-pusher
        body: |
          ## Docker Image Pusher ${{ github.ref_name }}
          
          This release includes pre-built binaries for multiple platforms.
          
          ### Features
          - Push Docker image tar packages directly to registries
          - Chunked uploads for large images (>10GB support)
          - Authentication support with Docker registries
          - Real-time progress tracking
          - Cross-platform compatibility
          
          ### Usage
          ```bash
          ./docker-image-pusher \
            --address http://your-registry:5000 \
            --username your-username \
            --password your-password \
            --file /path/to/image.tar
          ```
          
          ### Download Instructions
          - **Linux x64**: `docker-image-pusher` (x86_64-unknown-linux-gnu)
          - **Windows x64**: `docker-image-pusher.exe` (x86_64-pc-windows-msvc)
          - **macOS Intel**: `docker-image-pusher` (x86_64-apple-darwin)
          - **macOS Apple Silicon**: `docker-image-pusher` (aarch64-apple-darwin)
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
